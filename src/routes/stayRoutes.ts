//–û–±—â–∏–µ read-—Å–ø–∏—Å–∫–∏ –∏ —Ä—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –ø–æ stay-id.
//// routes/stayRoutes.ts
//import { Router } from "express";
//import {
//  getCurrentStays,
//  createStayForRoom,
//  updateStayByDates,
//  closeStay,
//  getStaysForRoom,
//} from "../controllers/stayController";
//import {
//  authenticateToken,
//  isEditorOrAdmin, // admin + editor
//  //  isAdmin,  —Ç–æ–ª—å–∫–æ admin (–Ω–∞ –±—É–¥—É—â–µ–µ –¥–ª—è delete)
//} from "../middlewares/authMiddleware";
//import {
//  getStaysByStatus,
//  getArrivalsToday,
//  getDeparturesToday,
//} from "../controllers/stayQuery.controller";
//import {
//  manualCheckIn,
//  manualCheckOut,
//  manualCancel,
//} from "../controllers/stayOps.controller";

//const router = Router();

//// –ü–æ—Ç–æ—á–Ω—ñ –±—Ä–æ–Ω—ñ/–∑–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ –≤—Å—å–æ–º—É –≥–æ—Ç–µ–ª—é (–¥–ª—è dashboard)
//// (–≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ Stay, —è–∫—ñ –Ω–µ completed/cancelled)
//// GET /rooms/stays/current
//router.get(
//  "/stays/current",
//  authenticateToken,
//  isEditorOrAdmin,
//  getCurrentStays
//);

//// –°—Ç–≤–æ—Ä–µ–Ω–Ω—è –±—Ä–æ–Ω—ñ/–∑–∞—Å–µ–ª–µ–Ω–Ω—è –ø–æ –∫—ñ–º–Ω–∞—Ç—ñ
//// POST /rooms/number/:roomNumber/stays
//router.post(
//  "/number/:roomNumber/stays",
//  authenticateToken,
//  isEditorOrAdmin,
//  createStayForRoom
//);

//// üìú –Ü—Å—Ç–æ—Ä—ñ—è –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ–π –∫—ñ–º–Ω–∞—Ç—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ ?from=YYYY-MM-DD&to=YYYY-MM-DD)
//// GET /rooms/number/:roomNumber/stays
//router.get(
//  "/number/:roomNumber/stays",
//  authenticateToken,
//  isEditorOrAdmin,
//  getStaysForRoom
//);

//// ‚úèÔ∏è  –†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±—Ä–æ–Ω—ñ/–∑–∞—Å–µ–ª–µ–Ω–Ω—è (–ø–æ –≤–∏—Ö—ñ–¥–Ω–∏–º checkIn/checkOut)
//// PUT /room/:roomNumber
//// (–¥–ª—è –∞–¥–º—ñ–Ω–∞/editor)
//// PUT /rooms/number/:roomNumber/stays
//router.put(
//  "/number/:roomNumber/stays",
//  authenticateToken,
//  isEditorOrAdmin,
//  updateStayByDates
//);

//// ‚ùå –ó–∞–∫—Ä–∏—Ç–∏ (completed) / –≤—ñ–¥–º—ñ–Ω–∏—Ç–∏ (cancelled)
//// PUT /rooms/number/:roomNumber/stays/close
//router.put(
//  "/number/:roomNumber/stays/close",
//  authenticateToken,
//  isEditorOrAdmin,
//  closeStay
//);

//// Booked / Occupied / Completed / Cancelled lists (you will mostly use booked/occupied)
//router.get(
//  "/stays/status/:status",
//  authenticateToken,
//  isEditorOrAdmin,
//  getStaysByStatus
//);

//// "–°–µ–≥–æ–¥–Ω—è –∑–∞—Å–µ–ª—è—é—Ç—Å—è" ‚Äî arrivals today (checkIn DATE = today)
//router.get(
//  "/stays/today/arrivals",
//  authenticateToken,
//  isEditorOrAdmin,
//  getArrivalsToday
//);

//// "–°–µ–≥–æ–¥–Ω—è –≤—ã—Å–µ–ª—è—é—Ç—Å—è" ‚Äî departures today (checkOut DATE = today)
//router.get(
//  "/stays/today/departures",
//  authenticateToken,
//  isEditorOrAdmin,
//  getDeparturesToday
//);

//// –ï—Å–ª–∏ –∫–æ–≥–¥–∞‚Äë–Ω–∏–±—É–¥—å –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è —É–¥–∞–ª–µ–Ω–∏–µ Stay ‚Äî –ª—É—á—à–µ —Ç–æ–ª—å–∫–æ admin
//// router.delete(
////   "/rooms/number/:roomNumber/stays",
////   authenticateToken,
////   isAdmin,
////   deleteStayByDates
//// );

///** –†—É—á–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã –∞–¥–º–∏–Ω–∞–º –∏ —Ä–µ–¥–∞–∫—Ç–æ—Ä–∞–º —Ç–µ–∫—É—â–µ–≥–æ –æ—Ç–µ–ª—è */
//router.post(
//  "/stays/:id/check-in",
//  authenticateToken,
//  isEditorOrAdmin,
//  manualCheckIn
//);
//router.post(
//  "/stays/:id/check-out",
//  authenticateToken,
//  isEditorOrAdmin,
//  manualCheckOut
//);
//router.post(
//  "/stays/:id/cancel",
//  authenticateToken,
//  isEditorOrAdmin,
//  manualCancel
//);

//export default router;
// src/routes/stays.routes.ts
import { Router } from "express";
import { getCurrentStays } from "../controllers/stayController";
import {
  authenticateToken,
  isEditorOrAdmin, // admin + editor
} from "../middlewares/authMiddleware";
import {
  getStaysByStatus,
  getArrivalsToday,
  getDeparturesToday,
} from "../controllers/stayQuery.controller";
import {
  manualCheckIn,
  manualCheckOut,
  manualCancel,
} from "../controllers/stayOps.controller";

const router = Router();

/**
 * Current active stays for the whole hotel (not completed/cancelled).
 * GET /stays/current
 */
router.get("/current", authenticateToken, isEditorOrAdmin, getCurrentStays);

/**
 * Lists by stay status: booked / occupied / completed / cancelled
 * GET /stays/status/:status
 */
router.get(
  "/status/:status",
  authenticateToken,
  isEditorOrAdmin,
  getStaysByStatus
);

/**
 * Arrivals today (DATE equality in hotel TZ)
 * GET /stays/today/arrivals
 */
router.get(
  "/today/arrivals",
  authenticateToken,
  isEditorOrAdmin,
  getArrivalsToday
);

/**
 * Departures today (DATE equality in hotel TZ)
 * GET /stays/today/departures
 */
router.get(
  "/today/departures",
  authenticateToken,
  isEditorOrAdmin,
  getDeparturesToday
);

/**
 * Manual operations on a specific stay
 * POST /stays/:id/check-in
 * POST /stays/:id/check-out
 * POST /stays/:id/cancel
 */
router.post("/:id/check-in", authenticateToken, isEditorOrAdmin, manualCheckIn);
router.post(
  "/:id/check-out",
  authenticateToken,
  isEditorOrAdmin,
  manualCheckOut
);
router.post("/:id/cancel", authenticateToken, isEditorOrAdmin, manualCancel);

export default router;
